(* stabilisateurs *)

(* let c = ref 0 *)
(* let _ = *)
(*   for k = 2 to 2 do *)
(*     let module Okada = Lib.Labelled.Make(struct let k = k end) in *)
(*     let planar = Okada.generate [B; P; S] in *)
(*     List.map (fun d -> *)
(*         let rec stabilize d' acc = *)
(*           (\* Printf.printf "%i\n%!" acc; *\) *)
(*           let new_d = Okada.concat d d' in *)
(*           (\* if !c < 10 then *\) *)
(*           (\*   begin Printf.printf "%s\n\n%!" (Okada.to_string new_d); incr c end; *\) *)
(*           if new_d = d' then (acc+1) *)
(*           else stabilize new_d (acc+1) *)
(*         in *)
(*         stabilize d 0 *)
(*       ) planar *)
(*     |> Lib.Toolbox.string_of_int_list |> Printf.printf "k = %i\n stabilisateurs : %s\n" k *)
(*   done *)
