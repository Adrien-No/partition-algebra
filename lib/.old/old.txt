(*https://ocaml.org/p/unionFind/latest/doc/UnionFind/Make/index.html*)

module PartitionAlgebra (P: sig val k : int end) = struct
  open UnionFind

  (* type el = Int of int | Int_Bar of int | Int_Bar_Bar of int *)
  type t =  (int * int) elem

  let el_of_int n =
    if n < P.k then (n+1)
    else if n < 2*P.k then (n+1)
    else failwith "wrong input"

  (* let iterator () = *)
  (*   let get n = *)
  (*     match UnionFind.find *)
  (*   let rec aux acc = *)
  (*     let open Seq in *)
  (*     function *)
  (*     | n when n <   P.k -> *)
  (*       let new_h = return (Int (n+1)) in *)
  (*       aux (cons new_h acc) (n+1) *)
  (*     | n when n < 2*Pn.k -> *)
  (*       let new_h = return (Int_Bar (n+1)) in *)
  (*       aux (cons new_h acc) (n+1) *)
  (*     | _               -> acc *)
  (*   in () *)

  let id =
    List.init (2*P.k) el_of_int |> List.map make |> List.fold_left union (make (el_of_int 1))

  (* let uf_map (a : 'a elem) (f : 'a elem -> 'a elem) = *)
  (*   let rec aux k acc = *)

  let concat (a: t) (a': t) =
    (* on suppose que a et a' sont de bonne taille *)

end


let () = print_endline "Hello, World!"

================================================================================================

(*https://ocaml.org/p/unionFind/latest/doc/UnionFind/Make/index.html*)

module PartitionAlgebra (P: sig val k : int end) = struct
  open P

  module UF = UnionFind.Make(UnionFind.StoreMap)
  type t = int UF.store * int UF.store

  let init =
    let s = UF.new_store() in
    for i = 1 to k do
      ignore (UF.make s i)
    done;
    s
  let id = create(), create()

  let concat (a, a': t) (b, b': t) =
    let rec aux n acc =
      if n = k then acc
      else
        if find

end


let () = print_endline "Hello, World!"
